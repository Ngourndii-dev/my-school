COmpletez les classes de dao suivante et donner moi de toutes 
ses codes de service ,  et controller package com.example.back.repository;

import com.example.back.model.*;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Repository;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

@Repository
@AllArgsConstructor
public class AnimalTemplateDAO {
    private Connection connection;
    public List<AnimalTemplate> findAll(){
        List<AnimalTemplate> animalTemplateList=new ArrayList<>();
        return animalTemplateList;
    }
    public AnimalTemplate getById(int id){
        return null;
    }

}
package com.example.back.repository;

import lombok.AllArgsConstructor;
import org.springframework.stereotype.Repository;
import com.example.back.model.*;
        import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;


@Repository
@AllArgsConstructor
public class AnimalDAO {
    private Connection connection;

    public List<Animal> findALl(){
        List<Animal> animalList=new ArrayList<>();
        return animalList;
    }
    public Animal getById(int id){
        return null;
    }
    public Animal updatePrice(int id, float price){
        return null;
    }
    public Animal updateStatus(int id, String status){
        return null;
    }

}

package com.example.back.repository;
import com.example.back.model.Event;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Repository;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;


@Repository
@AllArgsConstructor

public class EventDAO {
    private Connection connection;
    public List<Event> findAll(){
        List<Event> eventList=new ArrayList<>();
        return eventList;
    }
    public Event getById(int id){
        return null;
    }
    public Event updateSituationDate(int id, Date date){
        return null;
    }
}
package com.example.back.repository;

import com.example.back.model.Review;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Repository;

import java.sql.Connection;
import java.util.List;
@Repository
@AllArgsConstructor
public class ReviewDAO {
    private Connection connection;
    Review insert(Review review){
        return  null;
    }
    List<Review> findAll(){
        return  null;
    }
    void delete (int id){

    }
    Review getById(int id){
        return null;
    }
}
package com.example.back.repository;
import com.example.back.model.Client;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Repository;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;


@Repository
@AllArgsConstructor
public class ClientDAO {
    private Connection connection;
    public List<Client> findAll(){
        List<Client> clientList=new ArrayList<>();
        return clientList;
    }
    public Client getById(int id){
        return null;
    }
}
package com.example.back.repository;
import com.example.back.model.Orders;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Repository;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;


@Repository
@AllArgsConstructor
public class OrdersDAO {
    private Connection connection;
    public  List<Orders> findAll(){
        List<Orders> ordersList =new ArrayList<>();
        return ordersList;
    }
    public  Orders getById(int id){
        return  null;
    }
    public Orders updateStatus(int id,String status){
        return null;
    }
    public Orders updateOrderDate(int id, Date date){
        return null;
    }
}
package com.example.back.repository;
import com.example.back.model.Operation;
import lombok.AllArgsConstructor;
import org.springframework.stereotype.Repository;

import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;


@Repository
@AllArgsConstructor
public class OperationDAO {
    private Connection connection;
    public Operation insert(Operation operation){
        return null;
    }
    public List<Operation> findAll(){
        List<Operation> operationList=new ArrayList<>();
        return operationList;
    }
    public Operation getById(int id){
        return null;
    }


}


si mon script est  -- Création de la base de données
CREATE DATABASE my_zoo;

-- Connexion à la base de données
\c my_zoo;
--create all table
CREATE TABLE animal_template(
  id int serial primary key,
  name varchar (100) not null unique,
  species varchar(100) not null
);
CREATE TABLE animal (
  id int serial primary key,
  id_animal_template int references animal_template(id),
  sex VARCHAR(50) CHECK (status IN ('male', 'female')),
  origin varchar(50) not null,
  price float,
  rent float,
  status VARCHAR(50) CHECK (status IN ('available', 'unavailable')),
  color varchar (50) not null
);

CREATE TABLE event (
  id int serial primary key,
  id_animal int references animal(id),
  image varchar(20) not null,
  situation_date date not null
);

CREATE TABLE review (
    id SERIAL PRIMARY KEY,
    author VARCHAR(50) NOT NULL,
    id_animal INT REFERENCES animal(id)
    rating INT CHECK (rating BETWEEN 1 AND 5),
    comment VARCHAR(100),
    status VARCHAR(50) CHECK (status IN ('append', 'available', 'unavailable'))
);

CREATE TABLE client (
    id SERIAL PRIMARY KEY,
    client_name VARCHAR(100) NOT NULL,
    phone_number VARCHAR(15) UNIQUE,
    email VARCHAR(50) NOT NULL UNIQUE
);

CREATE TABLE orders (
    id SERIAL PRIMARY KEY,
    order_date DATE NOT NULL,
    status VARCHAR(50) CHECK (status IN ('append', 'available', 'unavailable')),
    quantity int not null,
    id_client INT REFERENCES client(id),
    id_animal INT REFERENCES animal(id)
);

CREATE TABLE operation(
  id int serial primary key,
  price FLOAT NOT NULL CHECK (price >= 0),
  id_animal int references animal(id),
  operation_date date,
  operation_type varchar(50) not null
);